{
  "info": {
    "name": "Order Execution Engine - Complete API Collection",
    "description": "Comprehensive API collection for the Order Execution Engine with DEX routing and WebSocket support",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "wsUrl",
      "value": "ws://localhost:3000",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "test-user-123",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Order Management",
      "item": [
        {
          "name": "Create Market Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('orderId', response.orderId);",
                  "    pm.test('Order created successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.orderId).to.exist;",
                  "        pm.expect(response.status).to.eql('pending');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"market\",\n  \"tokenIn\": \"SOL\",\n  \"tokenOut\": \"USDC\",\n  \"amountIn\": 100,\n  \"userId\": \"{{userId}}\",\n  \"slippageTolerance\": 0.01\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "execute"]
            }
          },
          "response": []
        },
        {
          "name": "Create Limit Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Limit order created successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.orderId).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"limit\",\n  \"tokenIn\": \"ETH\",\n  \"tokenOut\": \"USDT\",\n  \"amountIn\": 1,\n  \"amountOut\": 3000,\n  \"userId\": \"{{userId}}\",\n  \"slippageTolerance\": 0.005\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "execute"]
            }
          },
          "response": []
        },
        {
          "name": "Create Sniper Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Sniper order created successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.orderId).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"sniper\",\n  \"tokenIn\": \"BTC\",\n  \"tokenOut\": \"USDC\",\n  \"amountIn\": 0.1,\n  \"userId\": \"{{userId}}\",\n  \"slippageTolerance\": 0.02\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "execute"]
            }
          },
          "response": []
        },
        {
          "name": "Get Order Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Order status retrieved successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.order).to.exist;",
                  "        pm.expect(response.order.id).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get User Orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('User orders retrieved successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.orders).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "user", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get Active Orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Active orders retrieved successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.orders).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/active",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "active"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Queue Management",
      "item": [
        {
          "name": "Get Queue Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Queue stats retrieved successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.stats).to.exist;",
                  "        pm.expect(response.stats).to.have.property('waiting');",
                  "        pm.expect(response.stats).to.have.property('active');",
                  "        pm.expect(response.stats).to.have.property('completed');",
                  "        pm.expect(response.stats).to.have.property('failed');",
                  "        pm.expect(response.stats).to.have.property('total');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/queue/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "queue", "stats"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "WebSocket Management",
      "item": [
        {
          "name": "Get WebSocket Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('WebSocket stats retrieved successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.stats).to.exist;",
                  "        pm.expect(response.stats).to.have.property('totalConnections');",
                  "        pm.expect(response.stats).to.have.property('orderConnections');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/ws-stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "ws-stats"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Validation Tests",
      "item": [
        {
          "name": "Invalid Order Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return validation error for invalid order type', function () {",
                  "    pm.expect(pm.response.code).to.eql(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error).to.eql('Validation error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"invalid_type\",\n  \"tokenIn\": \"SOL\",\n  \"tokenOut\": \"USDC\",\n  \"amountIn\": 100,\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "execute"]
            }
          },
          "response": []
        },
        {
          "name": "Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return validation error for missing fields', function () {",
                  "    pm.expect(pm.response.code).to.eql(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error).to.eql('Validation error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"market\",\n  \"tokenIn\": \"SOL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "execute"]
            }
          },
          "response": []
        },
        {
          "name": "Negative Amount",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return validation error for negative amount', function () {",
                  "    pm.expect(pm.response.code).to.eql(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"market\",\n  \"tokenIn\": \"SOL\",\n  \"tokenOut\": \"USDC\",\n  \"amountIn\": -100,\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "execute"]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Slippage Tolerance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return validation error for invalid slippage', function () {",
                  "    pm.expect(pm.response.code).to.eql(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"market\",\n  \"tokenIn\": \"SOL\",\n  \"tokenOut\": \"USDC\",\n  \"amountIn\": 100,\n  \"userId\": \"{{userId}}\",\n  \"slippageTolerance\": 1.5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "execute"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "Non-existent Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return 404 for non-existent order', function () {",
                  "    pm.expect(pm.response.code).to.eql(404);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error).to.eql('Order not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/non-existent-order-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "non-existent-order-id"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "WebSocket Examples",
      "item": [
        {
          "name": "Order Status Stream (Manual)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Upgrade",
                "value": "websocket"
              },
              {
                "key": "Connection",
                "value": "Upgrade"
              },
              {
                "key": "Sec-WebSocket-Key",
                "value": "dGhlIHNhbXBsZSBub25jZQ=="
              },
              {
                "key": "Sec-WebSocket-Version",
                "value": "13"
              }
            ],
            "url": {
              "raw": "{{wsUrl}}/api/orders/stream?orderId={{orderId}}",
              "host": ["{{wsUrl}}"],
              "path": ["api", "orders", "stream"],
              "query": [
                {
                  "key": "orderId",
                  "value": "{{orderId}}"
                }
              ]
            },
            "description": "WebSocket connection for real-time order status updates. Use this after creating an order to track its execution progress."
          },
          "response": []
        },
        {
          "name": "Test WebSocket Connection",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Upgrade",
                "value": "websocket"
              },
              {
                "key": "Connection",
                "value": "Upgrade"
              },
              {
                "key": "Sec-WebSocket-Key",
                "value": "dGhlIHNhbXBsZSBub25jZQ=="
              },
              {
                "key": "Sec-WebSocket-Version",
                "value": "13"
              }
            ],
            "url": {
              "raw": "{{wsUrl}}/api/orders/test-ws",
              "host": ["{{wsUrl}}"],
              "path": ["api", "orders", "test-ws"]
            },
            "description": "Test WebSocket connection that doesn't require an order ID. Useful for testing WebSocket connectivity."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Load Testing",
      "item": [
        {
          "name": "Create Multiple Orders",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate random user ID for load testing",
                  "const randomUserId = 'load-test-user-' + Math.floor(Math.random() * 10000);",
                  "pm.collectionVariables.set('loadTestUserId', randomUserId);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Load test order created successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"market\",\n  \"tokenIn\": \"SOL\",\n  \"tokenOut\": \"USDC\",\n  \"amountIn\": {{$randomInt}},\n  \"userId\": \"{{loadTestUserId}}\",\n  \"slippageTolerance\": 0.01\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "execute"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default values if not already set",
          "if (!pm.collectionVariables.get('baseUrl')) {",
          "    pm.collectionVariables.set('baseUrl', 'http://localhost:3000');",
          "}",
          "if (!pm.collectionVariables.get('wsUrl')) {",
          "    pm.collectionVariables.set('wsUrl', 'ws://localhost:3000');",
          "}",
          "if (!pm.collectionVariables.get('userId')) {",
          "    pm.collectionVariables.set('userId', 'test-user-' + Date.now());",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test for response time",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Global test for content type",
          "if (pm.response.headers.get('content-type')) {",
          "    pm.test('Response has correct content type', function () {",
          "        pm.expect(pm.response.headers.get('content-type')).to.include('application/json');",
          "    });",
          "}"
        ]
      }
    }
  ]
}
